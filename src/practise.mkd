## 1. package.json

- npm init or npm init -y
- A standard Node.js project contains a file called package.json.
- It is a JSON manifest file which holds all of the relevant data to the app.
- `package.json` only tracks top-level dependencies for the project.

1. want to publish

- name, author, license, description — Important if you want to publish your repository.

2. Version

- If you are maintaining an open-source npm package, you should update it according to the semantic conventions. 3.7.2– 3 is the major version, 7 is the minor version, and 2 is the patch.

3. Scripts

   - Here we put out project’s scripts: building, testing, linting, deploying, etc.
   - Each project can have custom-made scripts adapted for a unique use-case
   - Custom scripts can be added and used by developers to enhance development capabilities
   - For example, executing end-to-end tests in a specific directory.

4. dependencies

- Required for building the project.
- A dependency is a library that a project needs to function effectively.

5. DevDependencies

- DevDependencies are the packages a developer needs during development.
- The dependencies needed only for the development of the project but not for building it.

## package-lock.json

- package-lock.json is generated automatically for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs can generate identical trees. This is used to save an exact copy of the packages to ensure that the program works the same on different machines.

## node_modules

- When you run npm install, npm installs the required packages into your project root directory in a folder called node_modules.

---

## 🧾 What is .npmrc?

- .npmrc is a settings file for npm (Node Package Manager).
  It tells npm how to behave when installing or publishing packages.

🧠 Why use .npmrc?

- Imagine you are working on a project.

You want:

- To download packages from a private registry (like your company’s server).
- To use a login token for authentication.
- To install packages exactly like 1.2.3, not ^1.2.3.
- To make npm faster and quieter in a CI/CD pipeline.
- To use different settings for each project.

Choose your use-case:

- ✅ Use npm with private company registry
  - Example: https://npm.my-company.com/
- ✅ Use GitHub Packages
  - Example: @your-name/package from GitHub
- ✅ Use GitLab, Nexus, or Artifactory registry
- ✅ Add proxy (for working inside office network)
- ✅ CI/CD setup (like GitHub Actions, GitLab CI)

---

## When to Use peerDependencies?

- When you create a library/package, you use some common packages — like react, angular, or rxjs.
  But you don’t want to install them again. You want the main app to give them.

So you say:

> “I need react, but the user must install it. I will only use it.”

That’s what peerDependencies means.

### 🔁 Why Use peerDependencies?

Because:

- Don’t want duplicate lodash.
- Want to use same lodash in many boxes.
- Want main app to control version.

1. package.json for Your Angular Library (my-ui-lib)

```
{
  "name": "my-ui-lib",
  "version": "1.0.0",
  "peerDependencies": {
    "@angular/core": "^17.0.0",
    "@angular/common": "^17.0.0",
    "rxjs": "^7.8.0"
  },
  "devDependencies": {
    "@angular/cli": "^17.0.0",
    "@angular/compiler-cli": "^17.0.0",
    "@angular/core": "^17.0.0",
    "@angular/common": "^17.0.0",
    "rxjs": "^7.8.0",
    "typescript": "~5.2.0"
  },
  "ngPackage": {
    "$schema": "./node_modules/ng-packagr/ng-package.schema.json",
    "lib": {
      "entryFile": "src/public-api.ts"
    }
  }
}
```

✅ This says:
peerDependencies: used by the main app
devDependencies: used by your library only, for local development and building

2. package.json for Your Angular App (my-app)

```
{
  "name": "my-app",
  "version": "1.0.0",
  "dependencies": {
    "@angular/core": "^17.0.0",
    "@angular/common": "^17.0.0",
    "rxjs": "^7.8.0",
    "my-ui-lib": "file:../dist/my-ui-lib"
  },
  "devDependencies": {
    "@angular/cli": "^17.0.0",
    "@angular/compiler-cli": "^17.0.0",
    "typescript": "~5.2.0"
  }
}
```

✅ This means:
The app installs my-ui-lib
Also installs the shared dependencies: Angular and RxJS

---

## optionalDependencies

In your package.json, the optionalDependencies field is used to specify non-critical packages — these are packages your project can work without, but will use if available.

When to Use optionalDependencies
Use optionalDependencies when:

- A package is useful but not required.
- Your app should still run even if the package fails to install.
- You’re supporting multiple platforms where some packages only work on certain OSes.

```
{
  "name": "my-app",
  "version": "1.0.0",
  "dependencies": {
    "express": "^4.18.2"
  },
  "optionalDependencies": {
    "fsevents": "^2.3.3"   // macOS-only; optional for other OSes
  }
}
In this example, if fsevents fails to install (like on Windows), npm will not stop the install process.

```

## npm link

Linking local packages with npm link is useful when you're developing multiple Node.js packages and want to test one package (my-lib) inside another project (my-app) without publishing it to npm.

Simple Steps to Use npm link (for Local Development)

1. Inside your local library folder (e.g., my-lib)

```
cd /path/to/my-lib
npm link
```

This creates a global symlink for my-lib.

2. Inside your consuming project (e.g., my-app)

```
cd /path/to/my-app
npm link my-lib
```

This links my-lib into node_modules of my-app from the global symlink.

File Structure Example

```
 /projects/
  ├── my-lib/       ← your local reusable library
  └── my-app/       ← your application consuming that lib
```

-When to Use
During active development of local packages.
To test changes before publishing to npm.

---

## To Unlink

```
Inside my-app:
npm unlink my-lib

Optionally, remove global link:
cd /path/to/my-lib
npm unlink
```

## Create a public/private npm package

complete step-by-step plan to create and publish your own Angular NPM package named ngx-smart-loading.

### Step 1: Generate the Angular Workspace & Library

1. Create Angular Workspace

```
ng new angular-workspace --create-application=false
cd angular-workspace

ng generate library ngx-smart-loading

```

2. 📁 Full Structure for Angular Library: ngx-smart-loading

```
angular-workspace/             <-- Angular workspace root
├── angular.json               <-- Workspace config
├── package.json               <-- Root dependencies
├── tsconfig.base.json         <-- Shared TypeScript config
├── projects/                  <-- Contains your library
│   └── ngx-smart-loading/     <-- Your actual package source code
│       ├── ng-package.json    <-- ng-packagr config
│       ├── package.json       <-- Library metadata
│       ├── README.md
│       └── src/
│           ├── public-api.ts  <-- Export public files
│           └── lib/
│               ├── smart-loading.module.ts
│               ├── smart-loading.service.ts
│               ├── smart-loading.component.ts
│               ├── smart-loading.directive.ts
│               └── smart-loading.interceptor.ts
├── dist/                      <-- Auto-created after build
│   └── ngx-smart-loading/     <-- Final build output after "ng build ngx-smart-loading"
```

3. Build the Library

```
ng build ngx-smart-loading
```

It will output to:

```
dist/ngx-smart-loading/
```

4. Test in a Local App (Optional but Recommended)

1. Option 1 — Link locally

```
cd dist/ngx-smart-loading
npm link
```

Then in your test app:

```
npm link ngx-smart-loading
```

2. Option 2 — Create test app in same workspace

```
ng generate application demo-app

```

Then import SmartLoadingModule in demo-app/src/app/app.module.ts.

5. Prepare for NPM Publish

1. Add metadata to:

```
projects/ngx-smart-loading/package.json

```

```
{
  "name": "ngx-smart-loading",
  "version": "1.0.0",
  "peerDependencies": {
    "@angular/core": "^17.0.0",
    "@angular/common": "^17.0.0"
  },
  "keywords": ["angular", "loader", "spinner", "http", "interceptor"],
  "author": "Your Name",
  "license": "MIT"
}

```

6. Publish to NPM

In your terminal (PowerShell or CMD), run:

```
npm login
```

You’ll be asked for:
Username (your npm account username)
Password
Email

After login:

```
cd dist/ngx-spinner-loading
npm publish --access public
```

7.  Step-by-Step Setup for GitHub Private Packages

1.  Prerequisites
    A GitHub account
    Your Angular monorepo (e.g., core-monorepo)
    Your libraries (libs/core, libs/shared-ui)
    A GitHub Personal Access Token (PAT) with write:packages and read:packages

1.  Add package.json in each library

```
{
  "name": "@your-org/core",
  "version": "1.0.0",
  "publishConfig": {
    "registry": "https://npm.pkg.github.com/"
  },
  "peerDependencies": {
    "@angular/core": "^16.0.0",
    "@angular/common": "^16.0.0"
  }
}
```

3. Add ng-package.json

```
{
  "$schema": "../../node_modules/ng-packagr/ng-package.schema.json",
  "dest": "../../dist/core",
  "lib": {
    "entryFile": "src/public-api.ts"
  }
}

```

4. Build the library

```
ng build core
ng build shared-ui

```

5.  Authenticate to GitHub Package Registry

```
npm login --registry=https://npm.pkg.github.com

```

When asked:
Username: your GitHub username
Password: your GitHub Personal Access Token
Email: your GitHub email

📌 Create a token at GitHub PAT settings
✅ Required scopes: write:packages, read:packages, repo

6.  Publish the package

```
   cd dist/core
   npm publish

   cd ../shared-ui
   npm publish

```

7.  Install in Client Repo (client-a, etc.)

In the client repo:
Add .npmrc (in root):

```
@your-org:registry=https://npm.pkg.github.com/
//npm.pkg.github.com/:_authToken=YOUR_GITHUB_TOKEN

```

> 🔐 Use a read-only token with read:packages scope

Then install:

```
npm install @your-org/core
npm install @your-org/shared-ui

```

---

## What is monorepo in nmp?

A monorepo (short for monolithic repository) in npm is a single Git repository that contains multiple packages or projects — all managed together in one place.

In the context of npm, a monorepo uses the workspaces feature to manage these multiple packages efficiently.

### 🔍 What is monorepo in nmp?

A monorepo (short for monolithic repository) in npm is a single Git repository that contains multiple packages or projects — all managed together in one place.
Instead of this:

✅ repo-1/ → ngx-spinner-loading

✅ repo-2/ → ngx-smart-loading

You use one repo:

```
monorepo/
├── package.json (root) ← defines all workspaces
├── projects/
│   ├── ngx-spinner-loading/
│   │   └── package.json
│   └── ngx-smart-loading/
│       └── package.json

```

### Benefits of Monorepo

🔗 Easy code sharing between packages
🔧 Centralized dependency management
🚀 One place to build, test, and deploy
🤝 Better collaboration in teams
📦 Local import: import { SpinnerService } from 'ngx-spinner-loading' even before publishing

---

### complete example of an npm monorepo using workspaces

✅ Goal
We’ll create a monorepo with two Angular-based libraries:

ngx-spinner-loading
ngx-smart-loading

All managed from a single repository using npm workspaces.

#### Final Folder Structure

```
angular-monorepo/
├── angular.json
├── package.json             <-- Workspaces + scripts
├── tsconfig.base.json
├── projects/
│   ├── ngx-spinner-loading/
│   │   ├── ng-package.json
│   │   ├── package.json
│   │   └── src/
│   │       ├── lib/
│   │       │   └── spinner.service.ts
│   │       └── public-api.ts
│   └── ngx-smart-loading/
│       ├── ng-package.json
│       ├── package.json
│       └── src/
│           ├── lib/
│           │   └── smart.service.ts
│           └── public-api.ts

```

#### Step-by-Step Setup Instructions

1. Create Angular Workspace (Empty)

```
ng new angular-monorepo --create-application=false
cd angular-monorepo
```

2. Setup Workspaces in package.json

```
{
  "name": "angular-monorepo",
  "version": "1.0.0",
  "private": true,
  "workspaces": [
    "projects/ngx-spinner-loading",
    "projects/ngx-smart-loading"
  ]
}
```

3.  Create Libraries

```
ng generate library ngx-spinner-loading --project-root=projects/ngx-spinner-loading
ng generate library ngx-smart-loading --project-root=projects/ngx-smart-loading

```

> 🔒 "private": true is required when using workspaces in npm.

2. Project-Based Angular Monorepo — designed for internal code sharing between apps and libraries (no npm publishing).

🎯 Goal
We will:

- Create a main Angular app

- Create a shared library (shared-ui)

- Create a feature module (feature-auth)

- Use both libraries inside the main app

1. step 1: Create Angular Monorepo Workspace

```
ng new angular-monorepo --create-application=false
cd angular-monorepo
```

2. Step 2: Generate App and Libraries

```
# Create main application
ng generate application main-app

# Create shared UI library
ng generate library shared-ui

# Create feature module library
ng generate library feature-auth

```

Folder structure becomes:

```
angular-monorepo/
├── projects/
│   ├── shared-ui/
│   └── feature-auth/
└── src/
    └── app/  <-- main-app source

```

3. Step 3: Add Code in shared-ui

File: projects/shared-ui/src/lib/shared-ui.module.ts

```
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SharedButtonComponent } from './shared-button.component';

@NgModule({
  declarations: [SharedButtonComponent],
  imports: [CommonModule],
  exports: [SharedButtonComponent]
})
export class SharedUiModule {}

```

Create component: projects/shared-ui/src/lib/shared-button.component.ts

```
import { Component } from '@angular/core';

@Component({
  selector: 'lib-shared-button',
  template: `<button>Shared Button</button>`,
})
export class SharedButtonComponent {}

```

Step 4: Use Libraries in App

```
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

import { SharedUiModule } from 'shared-ui';
import { FeatureAuthModule } from 'feature-auth';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    SharedUiModule,
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}

```

Edit src/app/app.component.html:

```
<h1>Main App</h1>
<lib-shared-button></lib-shared-button>
```

5. Step 5 :Serve the App

```
ng serve --project=main-app

```

You should see:

```
Main App
[Shared Button]
```

## Scalable Angular Monorepo

👇 Structure Overview (Simple but Scalable)

```
angular-enterprise/
├── angular.json
├── projects/
│   ├── apps/
│   │   ├── admin-panel/         ← App 1
│   │   └── customer-portal/     ← App 2
│   ├── libs/
│   │   ├── core/                ← Global services, interceptors, models
│   │   ├── shared-ui/           ← Reusable UI components
│   │   ├── feature-auth/        ← Auth feature module
│   │   └── feature-products/    ← Products feature module
└── tsconfig.base.json

```

### 🛠 Step-by-Step Setup

1. Create Workspace Without App

```
ng new angular-enterprise --create-application=false
cd angular-enterprise
```

2. Create Apps

```
ng generate application admin-panel --project-root=projects/apps/admin-panel
ng generate application customer-portal --project-root=projects/apps/customer-portal

```

3. Create Core and Shared Libraries

```
ng generate library core --project-root=projects/libs/core
ng generate library shared-ui --project-root=projects/libs/shared-ui

```

4. Create Feature Libraries

```
ng generate library feature-auth --project-root=projects/libs/feature-auth
ng generate library feature-products --project-root=projects/libs/feature-products

```

5. Run Any App

```
ng serve --project=admin-panel
ng serve --project=customer-portal

```

6.  Build

1.  Build Everything (Manual)

```
ng build shared-ui
ng build feature-auth
ng build core
ng build admin-panel
ng build customer-portal

```

2.  Build All (with Script)

In your root package.json, add:

```
"scripts": {
 "build:all": "ng build shared-ui && ng build feature-auth && ng build core && ng build admin-panel"
}

```

Run it:

```
npm run build:all

```

---

## npx?

npx is a powerful tool that comes with Node.js (since version 5.2.0 of npm) and allows you to run CLI tools without installing them globally.

### Why use npx?

- Run the latest version of a package.
- Avoid global installs and pollution.
- Easily test CLI tools or scripts.

Imagine this:

✅ Without npx
You have to install a tool first:

```
npm install -g create-react-app

```

This:

- Takes space on your system.
- Might cause version conflicts.
- Pollutes global tools list.

✅ With npx
You can use the tool immediately:

```
npx create-react-app my-app
```

This:

- No install needed.
- Always runs the latest version.
- Temporary — it's deleted after use

---

### npm ci

1. What is npm ci?

- It is a faster and cleaner way to install node_modules.

2.  Difference: npm install vs npm ci
    | Command | What it does |
    | ------------- | ------------------------------------------------------------------------------------------------------------------------- |
    | `npm install` | Installs packages normally. May change `package-lock.json`. |
    | `npm ci` | Installs packages **exactly as locked**, and **faster**. Never changes `package-lock.json`. Deletes `node_modules` first. |

---

## webpack-bundle-analyzer

It's a tool that shows you:

> “Which files and libraries are making your app big.”

It opens a chart in your browser where you can see what’s inside your bundle.

### in angualr

1. Step 1: Build the app for production with source maps

```
ng build --configuration production --source-map

```

> ✅ This creates your optimized bundle and .map files needed for analysis.

2.  Step 2: Install the analyzer tool

```
npm install -g source-map-explorer

```

> This is the recommended tool for Angular projects.

3.  Step 3: Analyze the main bundle

Find your main.\*.js file in:

```
dist/<your-project-name>/

```

Run this command:

```
npx source-map-explorer dist/your-project-name/main.*.js

```

4. 📈 Result
   It will:

Open a browser window

Show a colorful chart:

Big boxes = big files

You’ll see what's inside main.js

---

## Recommended Tools

| Tool                     | Why Use It                                                 | Runs When               |
| ------------------------ | ---------------------------------------------------------- | ----------------------- |
| **ESLint**               | Finds code bugs, unused vars, bad syntax, etc.             | Manually / Pre-commit   |
| **Prettier**             | Formats code nicely (indentation, spacing, etc.)           | Manually / Pre-commit   |
| **Markdownlint**         | Lints `.md` files (like `README.md`, docs)                 | Manually / Pre-commit   |
| **Husky**                | Runs checks automatically on Git events                    | Pre-commit              |
| **Lint-Staged**          | Runs `eslint`, `prettier`, etc. only on staged files       | Pre-commit (with Husky) |
| **Commitlint**           | Checks if commit messages follow rules                     | Commit-msg (via Husky)  |
| **Conventional Commits** | Standard style for commit messages (e.g., `feat:`, `fix:`) | Commit messages         |
| **semantic-release**     | Fully automated release system based on commits            | On CI/CD (after commit) |


# ✅ Husky + Lint-Staged + ESLint + Prettier Setup Guide

A complete step-by-step setup to run automatic lint and format checks before Git commits.

---

## 🎯 Goal

Use:
- **Husky** to run Git hooks
- **Lint-Staged** to run linters only on staged files
- **ESLint** to fix lint errors
- **Prettier** to auto-format code

---

## 🔹 Step 1: Install Dev Tools

```bash
npm install --save-dev husky lint-staged eslint prettier eslint-plugin-prettier eslint-config-prettier
```

---

## 🔹 Step 2: Setup Husky

### 2.1 Add to `package.json` scripts

```json
"scripts": {
  "prepare": "husky install"
}
```

### 2.2 Run prepare

```bash
npx husky install
```

---

## 🔹 Step 3: Create Pre-commit Hook

```bash
npx husky add .husky/pre-commit "npx lint-staged"
```

This creates `.husky/pre-commit` file with content:

```bash
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx lint-staged
```

---

## 🔹 Step 4: Add `lint-staged` Config to `package.json`

Add this at the root of `package.json`:

```json
"lint-staged": {
  "*.{ts,js}": ["eslint --fix", "prettier --write"],
  "*.{html,css,scss,json,md}": ["prettier --write"]
}
```

---

## 🔹 Step 5: Create ESLint Config

Create `.eslintrc.js` in your project root:

```js
module.exports = {
  root: true,
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint', 'prettier'],
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended'
  ],
  rules: {
    'prettier/prettier': 'error'
  },
  ignorePatterns: ['dist/', 'node_modules/']
};
```

---

## 🔹 Step 6: Install TypeScript ESLint Support

```bash
npm install --save-dev @typescript-eslint/parser @typescript-eslint/eslint-plugin
```

---

## 🔹 Step 7: Add Prettier Configs

### `.prettierrc`

```json
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "printWidth": 100,
  "trailingComma": "all"
}
```

### `.prettierignore`

```
node_modules
dist
coverage
```

---

## 🔹 Step 8: Test the Setup

1. Make a code change
2. Stage it:
   ```bash
   git add .
   ```
3. Commit:
   ```bash
   git commit -m "test: lint check"
   ```
4. ✅ Lint and format will run automatically on staged files

---

## ✅ Done!

You now have automated linting and formatting before each commit using:
- Husky
- Lint-Staged
- ESLint
- Prettier
---

## Automate tasks with `npm-run-all` or `concurrently`

Both npm-run-all and concurrently are powerful tools for automating tasks in package.json scripts.

✅ Purpose
They help run multiple npm scripts together in a sequence or parallel, which is useful for building, linting, testing, serving, etc.

✅ 1. Run Dev Server + Watch Files Together
You want to:

  Serve your app (vite, webpack-dev-server, ng serve)
  Watch or rebuild files (tsc --watch, webpack --watch)
  Auto-run other tasks (like live-reload or tailwind build)
Use: concurrently
```
"dev": "concurrently \"npm run serve\" \"npm run watch\""
```


✅ 2. Run Lint → Format → Test → Build (in order)
You want to:

  Lint code (eslint)
  Format code (prettier)
  Run tests (jest, vitest)
  Then build

Use: npm-run-all (sequential)
```
"check": "npm-run-all lint format test build"
```

---
# 📦 Dependency Management with `npm-check`

`npm-check` is a developer-friendly CLI tool to help you manage your `package.json` dependencies interactively. It checks for:

- ✅ Outdated dependencies
- 🧹 Unused packages
- 🆕 New versions (including major updates)
- 📌 Safe package upgrades

---

## 🔧 Installation

Install it globally:

```bash
npm install -g npm-check
```

Or as a dev dependency:
```
npm install --save-dev npm-check

```

1. Run the interactive checker
```
npx npm-check

```

2. Clean Unused Packages
> Remove --skip-unused to show and optionally remove unused packages.
```
npx npm-check --skip-unused

```

3. Check DevDependencies Only
```
npx npm-check --dev

```

4. Add a Script to package.json
```
{
  "scripts": {
    "check-deps": "npm-check"
  }
}

```
then run:
```
npm run check-deps

```
---
## npm, npx, yarn

| Tool   | Purpose                                   | Global Install Required | Main Use Case                            |
| ------ | ----------------------------------------- | ----------------------- | ---------------------------------------- |
| `npm`  | Install/manage packages                   | Yes (for global tools)  | Day-to-day package management            |
| `npx`  | Run a package without installing          | No                      | One-time tool usage                      |
| `yarn` | Install/manage packages (npm alternative) | Yes                     | Faster, consistent dependency management |


# 📦 Step-by-Step: `.npmrc` with Auth Tokens for Private Packages

This guide explains how to set up authentication tokens in your `.npmrc` file to install or publish private npm packages.

---

## ✅ Step 1: Create / Get Your Auth Token

### 🔹 For npmjs.com

1. Go to [https://www.npmjs.com/](https://www.npmjs.com/)
2. Sign in and navigate to **Access Tokens**:
   [https://www.npmjs.com/settings/YOUR_USERNAME/tokens](https://www.npmjs.com/settings/YOUR_USERNAME/tokens)
3. Create a new **Automation** or **Read-only** token.

### 🔹 For GitHub Packages

1. Go to [https://github.com/settings/tokens](https://github.com/settings/tokens)
2. Click "Generate new token" (classic)
3. Enable the following scopes:
   - `read:packages` — for installation
   - `write:packages` — for publishing

---

## ✅ Step 2: Add the Token to `.npmrc`

### 📁 Option A: Project-level `.npmrc` (recommended)

Create a `.npmrc` file in your project root and paste:

#### For **npmjs.com**:
```ini
//registry.npmjs.org/:_authToken=YOUR_NPM_TOKEN
```

For GitHub Packages (Scoped):
```
@your-org:registry=https://npm.pkg.github.com/
//npm.pkg.github.com/:_authToken=YOUR_GITHUB_PAT

```

For Custom Registry:
```
registry=https://npm.yourcompany.com/
//npm.yourcompany.com/:_authToken=YOUR_PRIVATE_TOKEN

```

✅ Step 3: Add .npmrc to .gitignore
```
.npmrc
```